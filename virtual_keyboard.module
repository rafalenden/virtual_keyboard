<?php

/**
 * Implements hook_menu().
 */
function virtual_keyboard_menu() {
  $items = array();
  $items['admin/config/user-interface/virtual-keyboard'] = array(
    'title' => 'Virtual Keyboard',
    'description' => 'Attach virtual keyboard to a text fields for mouse-driven entry.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('virtual_keyboard_admin_settings'),
    'access arguments' => array('administer virtual keyboard'),
    'file' => 'virtual_keyboard.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function virtual_keyboard_permission() {
  return array(
    'administer virtual keyboard' => array(
      'title' => t('Administer virtual keyboard settings'),
    ),
    'use virtual keyboard' => array(
      'title' => t('Use virtual keyboard'),
    ),
  );
}

/**
 * Implements hook_libraries_info().
 */
function virtual_keyboard_libraries_info() {
  $libraries['jquery.keyboard'] = array(
    'title' => 'jQuery Virtual Keyboard',
    'vendor url' => 'https://github.com/Mottie/Keyboard',
    'download url' => 'https://github.com/Mottie/Keyboard/archive/master.zip',
    'version' => '1',
    'files' => array(
      'js' => array(
        'js/jquery.keyboard.min.js',
      ),
      'css' => array(
        'css/keyboard.css',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_element_info_alter().
 */
function virtual_keyboard_element_info_alter(&$types) {
  foreach (array_keys($types) as $type) {
    switch ($type) {
      case 'form':
      case 'textarea':
      case 'textfield':
        $types[$type]['#process'][] = 'virtual_keyboard_process_element';
        break;
    }
  }
}

/**
 * Element process callback.
 *
 * @param array $element
 *   The render array element.
 *
 * @return array
 *   The processed element.
 */
function virtual_keyboard_process_element($element) {
  if (user_access('use virtual keyboard')) {
    if (isset($element['#virtual_keyboard'])) {
      $action = $element['#virtual_keyboard'] == TRUE ? 'include' : 'exclude';

      if ($element['#type'] == 'form') {
        $element['#attributes']['class'][] = 'virtual-keyboard-' . $action . '-children';
      }
      else {
        $element['#attributes']['class'][] = 'virtual-keyboard-' . $action;
      }
    }

    if ($element['#type'] == 'form') {
      virtual_keyboard_attach($element);
    }
  }

  return $element;
}

/**
 * Adds virtual keyboard support to form element.
 *
 * @param array $element
 *   Form API element.
 */
function virtual_keyboard_attach(&$element) {
  // Adding Virtual Keyboard plugin library.
  if (!module_exists('libraries') || !libraries_detect('jquery.keyboard')) {
    return;
  }

  $options = array(
    // Buttons layout for virtual keyboard.
    'layout' => 'qwerty',
    // When cliked outside keyboard leave keyboard shown.
    'stayOpen' => FALSE,
    // Don't have to click "Accept" button.
    'autoAccept' => TRUE,
    // Use the same textfield.
    'usePreview' => FALSE,
    // Don't open when textfield is focused.
    'openOn' => NULL,
    // When tab si clicked next textfield is focused.
    'tabNavigation' => TRUE,
    // Hight of keyboard icon used to show virtual keyboard.
    'triggerHeight' => 5,
    // Position of virtual keyboard relative to textfield.
    'position' => array(
      'my' => 'left top',
      'at' => 'left bottom',
      'at2' => 'left bottom',
    ),
  );
  drupal_alter('virtual_keyboard_options', $options);

  $element['#attached']['library'][] = array('system', 'ui');
  $element['#attached']['library'][] = array('system', 'ui.position');
  $element['#attached']['libraries_load'][] = array('jquery.keyboard');

  // Adding settings.
  $whitechars = array("\r\n", "\r", "\n");
  $element['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array(
      'virtual_keyboard' => array(
        'include' => str_replace($whitechars, ',', variable_get('virtual_keyboard_include', '')),
        'exclude' => str_replace($whitechars, ',', variable_get('virtual_keyboard_exclude', '')),
        'options' => $options,
      ),
    ),
  );
  // Adding module JS file.
  $element['#attached']['js'][] = array(
    'type' => 'file',
    'data' => drupal_get_path('module', 'virtual_keyboard') . '/virtual_keyboard.js',
  );
  // Adding module CSS file.
  $element['#attached']['css'][] = array(
    'type' => 'file',
    'data' => drupal_get_path('module', 'virtual_keyboard') . '/virtual_keyboard.css',
  );
}
